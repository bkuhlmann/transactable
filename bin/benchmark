#! /usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile true do
  source "https://rubygems.org"

  gem "benchmark-ips"
  gem "dry-transaction"
  gem "kwork", github: "nebulab/kwork"
  gem "transactable", path: ".."
end

require "benchmark"
require "json"

Profiler = lambda do |callback, _name, _positionals, _keywords, _block|
  result = nil
  Benchmark.measure { result = callback.call }
  result
end

# Monad
class Monader
  include Dry::Monads[:result]

  def call body
    Success(body).fmap { |content| JSON content, symbolize_names: true }
                 .fmap { |attributes| attributes.fetch :value }
                 .fmap { |value| value.round 2 }
                 .fmap { |value| value * 10 }
  end
end

# Dry Transaction.
class Transactor
  include Dry::Monads[:result]
  include Dry::Transaction

  step :parse
  step :fetch
  step :round
  step :multiply

  private

  def parse(body) = Success JSON(body, symbolize_names: true)

  def fetch(attributes) = Success attributes.fetch(:value)

  def round(value) = Success value.round(2)

  def multiply(value) = Success value * 10
end

# Kwork (fast)
class FastWorker
  include Kwork[operations: %i[parse fetch round multiply]]

  def call body
    transaction do |action|
      attributes = action.parse body
      value = action.fetch attributes
      value = action.round value
      action.multiply value
    end
  end

  private

  def parse(body) = success JSON(body, symbolize_names: true)

  def fetch(attributes) = success attributes.fetch(:value)

  def round(value) = success value.round(2)

  def multiply(value) = success value * 10
end

# Kwork (slow)
class SlowWorker
  include Kwork[operations: %i[parse fetch round multiply], profiler: Profiler]

  def call body
    transaction do |action|
      attributes = action.parse body
      value = action.fetch attributes
      value = action.round value
      action.multiply value
    end
  end

  private

  def parse(body) = success JSON(body, symbolize_names: true)

  def fetch(attributes) = success attributes.fetch(:value)

  def round(value) = success value.round(2)

  def multiply(value) = success value * 10
end

# Transactable (fast).
class FastTransactor
  include Transactable

  def call(body) = pipe body, :parse, :fetch, :round, :multiply

  private

  def parse(body) = body.fmap { |content| JSON content, symbolize_names: true }

  def fetch(body) = body.fmap { |attributes| attributes.fetch :value }

  def round(value) = value.fmap { |number| number.round 2 }

  def multiply(value) = value.fmap { |number| number * 10 }
end

# Transactable (slow).
class SlowTransactor
  include Transactable

  def call body
    pipe body,
         fmap { |content| JSON content, symbolize_names: true },
         as(:fetch, :value),
         as(:round, 2),
         as(:*, 10)
  end
end

body = %({"value": 1.2345})
monader = Monader.new
transactor = Transactor.new
fast_worker = FastWorker.new
slow_worker = SlowWorker.new
fast_transactor = FastTransactor.new
slow_transactor = SlowTransactor.new

Benchmark.ips do |benchmark|
  benchmark.config time: 5, warmup: 2

  benchmark.report("Monad") { monader.call body }
  benchmark.report("Dry::Transction") { transactor.call body }
  benchmark.report("Kwork (fast)") { fast_worker.call body }
  benchmark.report("Kwork (slow)") { slow_worker.call body }
  benchmark.report("Transactable (fast)") { fast_transactor.call body }
  benchmark.report("Transactable (slow)") { slow_transactor.call body }

  benchmark.compare!
end

__END__

Warming up --------------------------------------
               Monad    36.061k i/100ms
     Dry::Transction    11.987k i/100ms
        Kwork (fast)    16.818k i/100ms
        Kwork (slow)     8.451k i/100ms
 Transactable (fast)    17.438k i/100ms
 Transactable (slow)     5.150k i/100ms
Calculating -------------------------------------
               Monad    367.741k (± 2.2%) i/s -      1.839M in   5.003410s
     Dry::Transction    119.433k (± 2.0%) i/s -    599.350k in   5.020084s
        Kwork (fast)    168.223k (± 2.2%) i/s -    840.900k in   5.001060s
        Kwork (slow)     84.517k (± 2.3%) i/s -    422.550k in   5.001932s
 Transactable (fast)    175.129k (± 2.0%) i/s -    889.338k in   5.080141s
 Transactable (slow)     50.571k (± 1.9%) i/s -    257.500k in   5.093439s

Comparison:
               Monad:   367740.9 i/s
 Transactable (fast):   175129.0 i/s - 2.10x  slower
        Kwork (fast):   168223.2 i/s - 2.19x  slower
     Dry::Transction:   119433.3 i/s - 3.08x  slower
        Kwork (slow):    84516.7 i/s - 4.35x  slower
 Transactable (slow):    50571.3 i/s - 7.27x  slower
