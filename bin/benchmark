#! /usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile true do
  source "https://rubygems.org"

  gem "benchmark-ips"
  gem "dry-transaction"
  gem "kwork", github: "nebulab/kwork"
  gem "transactable", path: ".."
end

require "benchmark"
require "json"

Profiler = lambda do |callback, _name, _positionals, _keywords, _block|
  result = nil
  Benchmark.measure { result = callback.call }
  result
end

# For monad comparison.
Monader = Class.new do
  include Dry::Monads[:result]

  def call body
    Success(body).fmap { |content| JSON content, symbolize_names: true }
                 .fmap { |attributes| attributes.fetch :value }
                 .fmap { |value| value.round 2 }
                 .fmap { |value| value * 10 }
  end
end

# For Dry Transaction comparison.
Transactor = Class.new do
  include Dry::Monads[:result]
  include Dry::Transaction

  step :parse
  step :fetch
  step :round
  step :multiply

  private

  def parse(body) = Success JSON(body, symbolize_names: true)

  def fetch(attributes) = Success attributes.fetch(:value)

  def round(value) = Success value.round(2)

  def multiply(value) = Success value * 10
end

# For Kwork comparison (fast).
FastWorker = Class.new do
  include Kwork[operations: %i[parse fetch round multiply]]

  def call(body) = transaction { |step| step.multiply step.round(step.fetch(step.parse(body))) }

  private

  def parse(body) = success JSON(body, symbolize_names: true)

  def fetch(attributes) = success attributes.fetch(:value)

  def round(value) = success value.round(2)

  def multiply(value) = success value * 10
end

# For Kwork comparison (slow).
SlowWorker = Class.new do
  include Kwork[operations: %i[parse fetch round multiply], profiler: Profiler]

  def call(body) = transaction { |step| step.multiply step.round(step.fetch(step.parse(body))) }

  private

  def parse(body) = success JSON(body, symbolize_names: true)

  def fetch(attributes) = success attributes.fetch(:value)

  def round(value) = success value.round(2)

  def multiply(value) = success value * 10
end

# For Transactable comparison (fast).
FastComposer = Class.new do
  include Transactable

  def call body
    pipe body, method(:parse), method(:fetch), method(:round), method(:multiply)
  end

  private

  def parse(body) = body.fmap { |content| JSON content, symbolize_names: true }

  def fetch(body) = body.fmap { |attributes| attributes.fetch :value }

  def round(value) = value.fmap { |number| number.round 2 }

  def multiply(value) = value.fmap { |number| number * 10 }
end

# For Transactable comparison (slow).
SlowComposer = Class.new do
  include Transactable

  def call body
    pipe body,
         fmap { |content| JSON content, symbolize_names: true },
         as(:fetch, :value),
         as(:round, 2),
         as(:*, 10)
  end
end

body = %({"value": 1.2345})
monader = Monader.new
transactor = Transactor.new
fast_worker = FastWorker.new
slow_worker = SlowWorker.new
fast_composer = FastComposer.new
slow_composer = SlowComposer.new

Benchmark.ips do |benchmark|
  benchmark.config time: 5, warmup: 2

  benchmark.report("Monad") { monader.call body }
  benchmark.report("Dry::Transction") { transactor.call body }
  benchmark.report("Kwork (fast)") { fast_worker.call body }
  benchmark.report("Kwork (slow)") { slow_worker.call body }
  benchmark.report("Transactable (fast)") { fast_composer.call body }
  benchmark.report("Transactable (slow)") { slow_composer.call body }

  benchmark.compare!
end

__END__

Warming up --------------------------------------
               Monad    36.639k i/100ms
     Dry::Transction    11.748k i/100ms
        Kwork (fast)    16.886k i/100ms
        Kwork (slow)     8.422k i/100ms
 Transactable (fast)    21.790k i/100ms
 Transactable (slow)     5.110k i/100ms
Calculating -------------------------------------
               Monad    365.327k (± 2.1%) i/s -      1.832M in   5.016761s
     Dry::Transction    116.653k (± 1.6%) i/s -    587.400k in   5.036597s
        Kwork (fast)    169.475k (± 1.9%) i/s -    861.186k in   5.083281s
        Kwork (slow)     85.192k (± 2.2%) i/s -    429.522k in   5.043950s
 Transactable (fast)    218.667k (± 2.0%) i/s -      1.111M in   5.084101s
 Transactable (slow)     49.812k (± 2.1%) i/s -    250.390k in   5.028675s

Comparison:
               Monad:   365327.1 i/s
 Transactable (fast):   218667.3 i/s - 1.67x  slower
        Kwork (fast):   169475.1 i/s - 2.16x  slower
     Dry::Transction:   116653.1 i/s - 3.13x  slower
        Kwork (slow):    85192.2 i/s - 4.29x  slower
 Transactable (slow):    49811.9 i/s - 7.33x  slower
